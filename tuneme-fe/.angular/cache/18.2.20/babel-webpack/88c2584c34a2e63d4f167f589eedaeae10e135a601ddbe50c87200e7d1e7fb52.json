{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\nlet LeftNavMenuComponent = class LeftNavMenuComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.menuItems = [{\n      label: 'Home',\n      route: '/home',\n      icon: 'fas fa-home'\n    }, {\n      label: 'My Knowledge',\n      route: '/my-knowledge',\n      icon: 'fas fa-book',\n      roles: ['user', 'admin']\n    }, {\n      label: 'Find A Service',\n      route: '/find-a-service',\n      icon: 'fas fa-search',\n      roles: ['user', 'admin']\n    }, {\n      label: 'My Health',\n      route: '/my-health',\n      icon: 'fas fa-heartbeat',\n      roles: ['user', 'admin']\n    }, {\n      label: 'Your Tips',\n      route: '/your-tips',\n      icon: 'fas fa-lightbulb',\n      roles: ['user', 'admin']\n    }, {\n      label: 'My Favourites',\n      route: '/my-favourites',\n      icon: 'fas fa-star',\n      roles: ['user', 'admin']\n    }];\n    this.isMobileMenuOpen = false;\n    this.currentUserRole = '';\n  }\n  ngOnInit() {\n    this.currentUserRole = this.authService.getUserRole();\n  }\n  toggleMobileMenu() {\n    this.isMobileMenuOpen = !this.isMobileMenuOpen;\n  }\n  shouldShowMenuItem(item) {\n    if (!item.roles) {\n      return true; // Show if no specific roles are defined\n    }\n    return item.roles.includes(this.currentUserRole);\n  }\n  // Method to check if the current route matches the menu item's route\n  isActive(route) {\n    return this.router.url === route;\n  }\n};\nLeftNavMenuComponent = __decorate([Component({\n  selector: 'app-left-nav-menu',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive],\n  templateUrl: './left-nav-menu.component.html',\n  styleUrl: './left-nav-menu.component.css'\n})], LeftNavMenuComponent);\nexport { LeftNavMenuComponent };","map":{"version":3,"names":["Component","CommonModule","RouterLink","RouterLinkActive","LeftNavMenuComponent","constructor","authService","router","menuItems","label","route","icon","roles","isMobileMenuOpen","currentUserRole","ngOnInit","getUserRole","toggleMobileMenu","shouldShowMenuItem","item","includes","isActive","url","__decorate","selector","standalone","imports","templateUrl","styleUrl"],"sources":["C:\\Users\\np59585\\gemini-angular-app\\Sample1\\src\\app\\components\\left-nav-menu\\left-nav-menu.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink, RouterLinkActive, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\ninterface MenuItem {\n  label: string;\n  route: string;\n  icon: string; // Class for Font Awesome icon\n  roles?: string[]; // Optional: roles that can see this item\n}\n\n@Component({\n  selector: 'app-left-nav-menu',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive],\n  templateUrl: './left-nav-menu.component.html',\n  styleUrl: './left-nav-menu.component.css'\n})\nexport class LeftNavMenuComponent implements OnInit {\n  menuItems: MenuItem[] = [\n    { label: 'Home', route: '/home', icon: 'fas fa-home' },\n    { label: 'My Knowledge', route: '/my-knowledge', icon: 'fas fa-book', roles: ['user', 'admin'] },\n    { label: 'Find A Service', route: '/find-a-service', icon: 'fas fa-search', roles: ['user', 'admin'] },\n    { label: 'My Health', route: '/my-health', icon: 'fas fa-heartbeat', roles: ['user', 'admin'] },\n    { label: 'Your Tips', route: '/your-tips', icon: 'fas fa-lightbulb', roles: ['user', 'admin'] },\n    { label: 'My Favourites', route: '/my-favourites', icon: 'fas fa-star', roles: ['user', 'admin'] },\n  ];\n\n  isMobileMenuOpen = false;\n  currentUserRole: string = '';\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.currentUserRole = this.authService.getUserRole();\n  }\n\n  toggleMobileMenu() {\n    this.isMobileMenuOpen = !this.isMobileMenuOpen;\n  }\n\n  shouldShowMenuItem(item: MenuItem): boolean {\n    if (!item.roles) {\n      return true; // Show if no specific roles are defined\n    }\n    return item.roles.includes(this.currentUserRole);\n  }\n\n  // Method to check if the current route matches the menu item's route\n  isActive(route: string): boolean {\n    return this.router.url === route;\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,UAAU,EAAEC,gBAAgB,QAAgB,iBAAiB;AAiB/D,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAa/BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAZ5D,KAAAC,SAAS,GAAe,CACtB;MAAEC,KAAK,EAAE,MAAM;MAAEC,KAAK,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAa,CAAE,EACtD;MAAEF,KAAK,EAAE,cAAc;MAAEC,KAAK,EAAE,eAAe;MAAEC,IAAI,EAAE,aAAa;MAAEC,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO;IAAC,CAAE,EAChG;MAAEH,KAAK,EAAE,gBAAgB;MAAEC,KAAK,EAAE,iBAAiB;MAAEC,IAAI,EAAE,eAAe;MAAEC,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO;IAAC,CAAE,EACtG;MAAEH,KAAK,EAAE,WAAW;MAAEC,KAAK,EAAE,YAAY;MAAEC,IAAI,EAAE,kBAAkB;MAAEC,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO;IAAC,CAAE,EAC/F;MAAEH,KAAK,EAAE,WAAW;MAAEC,KAAK,EAAE,YAAY;MAAEC,IAAI,EAAE,kBAAkB;MAAEC,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO;IAAC,CAAE,EAC/F;MAAEH,KAAK,EAAE,eAAe;MAAEC,KAAK,EAAE,gBAAgB;MAAEC,IAAI,EAAE,aAAa;MAAEC,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO;IAAC,CAAE,CACnG;IAED,KAAAC,gBAAgB,GAAG,KAAK;IACxB,KAAAC,eAAe,GAAW,EAAE;EAE4C;EAExEC,QAAQA,CAAA;IACN,IAAI,CAACD,eAAe,GAAG,IAAI,CAACR,WAAW,CAACU,WAAW,EAAE;EACvD;EAEAC,gBAAgBA,CAAA;IACd,IAAI,CAACJ,gBAAgB,GAAG,CAAC,IAAI,CAACA,gBAAgB;EAChD;EAEAK,kBAAkBA,CAACC,IAAc;IAC/B,IAAI,CAACA,IAAI,CAACP,KAAK,EAAE;MACf,OAAO,IAAI,CAAC,CAAC;IACf;IACA,OAAOO,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAAC,IAAI,CAACN,eAAe,CAAC;EAClD;EAEA;EACAO,QAAQA,CAACX,KAAa;IACpB,OAAO,IAAI,CAACH,MAAM,CAACe,GAAG,KAAKZ,KAAK;EAClC;CACD;AAlCYN,oBAAoB,GAAAmB,UAAA,EAPhCvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,mBAAmB;EAC7BC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAACzB,YAAY,EAAEC,UAAU,EAAEC,gBAAgB,CAAC;EACrDwB,WAAW,EAAE,gCAAgC;EAC7CC,QAAQ,EAAE;CACX,CAAC,C,EACWxB,oBAAoB,CAkChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}